name: Backend CI - Test, Build and Push Images to ACR

on:
  push:
    branches:
      - testing
  workflow_dispatch:

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  test_backends:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Customer Service
      - name: Install dependencies - Customer Service
        working-directory: backend/customer_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx

         # 3. Install dependencies and run code quality checks
      - name: Install dependencies
        run: | # Use a multi-line script to install pip dependencies
          pip install --upgrade pip
          # Loop through each backend service folder
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          # Install CI tools
          pip install pytest httpx

      # 5. Run tests for product service
      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q
      
      # 6. Run tests for order service
      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q
      # ---------------------------
  

  # ---------------------------
  # Stage 2: Build and Push Docker Images
  # ---------------------------
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_backends

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

      # Build & push Docker images
      - name: Build & Push Customer Service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest ./backend/customer_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest

      - name: Build & Push Order Service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:latest ./backend/order_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:latest

      - name: Build & Push Product Service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:latest ./backend/product_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:latest

      - name: Build & Push Frontend
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Logout from Azure
        run: az logout
        if: always()
