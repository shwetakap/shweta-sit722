name: Backend CI - Test, Build and Push Images to ACR

on:
  push:
    branches:
      - testing
  workflow_dispatch:

env:
  # ACr Login Server (e.g., myregistry.azurecr.io)
  # This needs to be set as a GitHub Repository Secret
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  # Dynamically generate image tags based on Git SHA and GitHub Run ID
  # This provides unique, traceable tags for each image build
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  # Job 1: Run tests and linting for all backend services
  test_and_lint_backends:
    runs-on: ubuntu-latest # Use a GitHub-hosted runner

    services:
      # Product DB container
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        # Make pg_isready available so the service is healthy before tests run
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
     
      # Order DB
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      #Customer DB
      customer_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customers
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
      # 1. Checkout the repository code to the runner
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your repository code

      # 2. Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v5 # Action to set up Python environment
        with:
          python-version: '3.10'

      # 3. Install dependencies and run code quality checks
      - name: Install dependencies
        run: | # Use a multi-line script to install pip dependencies
          pip install --upgrade pip
          # Loop through each backend service folder
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          # Install CI tools
          pip install pytest httpx

      # 5. Run tests fo2Sr product service
      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q
      

      - name: Run customer_service tests
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

      # 6. Run tests for order service
      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

     
  

  # ---------------------------
  # Stage 2: Build and Push Docker Images
  # ---------------------------
  # Job 2: Build and Push Dockers Images (runs only if tests pass)
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Azure login using a Service Principal secret
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # Needs to be set as a GitHub Secret (Service Principal JSON)

    # Login to Azure Container Registry (ACR)
    - name: Login to Azure Container Registry
      run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

    # Build and Push Docker image for Product Service
    - name: Build and Push Product Service Image
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:latest ./backend/product_service/
        docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:latest

    # Build and Push Docker image for Order Service
    - name: Build and Push Order Service Image
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:latest ./backend/order_service/
        docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:latest

    - name: Build and Push Customer Service Image
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest ./backend/customer_service/
        docker push ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest


    # Logout from Azure for security (runs even if image push fails)
    - name: Logout from Azure
      run: az logout
      if: always()


 # Stage 3: Build, Push, Deploy Staging
  name: Backend CI - Deploy to Staging

on:
  workflow_run:
    workflows: ["Backend CI - Test, Build and Push Images to ACR"]
    types:
      - completed
  workflow_dispatch:

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
  RG_NAME: sk10-rg   # Existing staging resource group

jobs:
  deploy_staging:
    runs-on: ubuntu-latest
    #sif: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'testing' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Product Service
        run: |
          az container create \
            --resource-group ${{ env.RG_NAME }} \
            --name product-service-staging \
            --image ${{ env.ACR_LOGIN_SERVER }}/product_service:latest \
            --cpu 1 --memory 1 \
            --restart-policy Never \
            --registry-login-server ${{ env.ACR_LOGIN_SERVER }}

      - name: Deploy Order Service
        run: |
          az container create \
            --resource-group ${{ env.RG_NAME }} \
            --name order-service-staging \
            --image ${{ env.ACR_LOGIN_SERVER }}/order_service:latest \
            --cpu 1 --memory 1 \
            --restart-policy Never \
            --registry-login-server ${{ env.ACR_LOGIN_SERVER }}

      - name: Deploy Customer Service
        run: |
          az container create \
            --resource-group ${{ env.RG_NAME }} \
            --name customer-service-staging \
            --image ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest \
            --cpu 1 --memory 1 \
            --restart-policy Never \
            --registry-login-server ${{ env.ACR_LOGIN_SERVER }}

      - name: Run Simple Acceptance Tests
        run: |
          echo "Run trivial acceptance tests here, e.g., curl /health endpoints"

      - name: Logout from Azure
        run: az logout