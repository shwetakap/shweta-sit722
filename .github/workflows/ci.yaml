name: Backend CI - Test, Build and Push Images to ACR

on:
  push:
    branches:
      - testing
  workflow_dispatch:

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  # ---------------------------
  # Stage 1: Run atests
  # ---------------------------
  test_and_lint_backends:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: bitnami/postgresql:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      order_db:
        image: bitnami/postgresql:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      customer_db:
        image: bitnami/postgresql:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customers
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run customer_service tests
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  # ---------------------------
  # Stage 2: Build and Push Docker Images
  # ---------------------------
  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

      - name: Build and Push Product Service Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} ./backend/product_service/
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}

      - name: Build and Push Order Service Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} ./backend/order_service/
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}

      - name: Build and Push Customer Service Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }} ./backend/customer_service/
          docker push ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }}

      - name: Logout from Azure
        run: az logout
        if: always()

  # ---------------------------
  # Stage 3: Deploy to Staging
  # ---------------------------
  deploy_staging:
    runs-on: ubuntu-latest
    needs: build_and_push_images
    env:
      STAGING_RG: sk10-rg

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      

      - name: Deploy Product Service to ACI
        run: |
          az container create \
            --resource-group ${{ env.STAGING_RG }} \
            --name product-service \
            --image ${{ env.ACR_LOGIN_SERVER }}/product_service:latest \
            --dns-name-label product-staging \
            --ports 80 \
            --restart-policy OnFailure \
            --os-type Linux \
            --registry-login-server ${{ env.ACR_LOGIN_SERVER }} \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --cpu 1 \
            --memory 1.5 


       # Deploy Order Service to Staging
      - name: Deploy Order Service
        run: |
         az container create \
            --resource-group ${{ env.STAGING_RG }} \
            --name order-service \
            --image ${{ env.ACR_LOGIN_SERVER }}/order_service:latest \
            --dns-name-label order-staging \
            --ports 80 \
            --restart-policy OnFailure \
            --registry-login-server ${{ env.ACR_LOGIN_SERVER }} \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --cpu 1 \
            --memory 1.5 


    # Deploy Customer Service to Staging
      - name: Deploy Customer Service
        run: |
         az container create \
          --resource-group ${{ env.STAGING_RG }} \
          --name customer-service \
          --image ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest \
          --dns-name-label customer-staging \
          --ports 80 \
          --restart-policy OnFailure \
          --registry-login-server ${{ env.ACR_LOGIN_SERVER }} \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --cpu 1 \
          --memory 1.5 

      
      - name: Run Acceptance Test (simple)
        run: |
          echo "Simulating acceptance tests..."
          # Replace with actual curl checks if you expose endpoints

      - name: Destroy staging environment
        if: always()
        run: az group delete -n $STAGING_RG --yes --no-wait
